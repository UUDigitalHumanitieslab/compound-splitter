# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Unit tests

on: [push]

jobs:
  build:

    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2
    - name: Cache pip modules
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: dependencies
        key: ${{ runner.os }}-dependencies-${{ hashFiles('retrieve.py') }}
        restore-keys: |
          ${{ runner.os }}-dependencies-

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
    - name: Check types with Mypy
      run: |
        pip install mypy
        mypy -p compound_splitter
        mypy -p methods
        mypy *.py
    - name: Retrieve and prepare compound splitters
      run: |
        python ./retrieve.py
        python ./prepare.py
    - name: Run unit tests
      run: |
        python -m unittest discover tests/
    - name: Run evaluation
      run: |
        python -m compound_splitter.evaluate
    - name: Install as pip package
      run: |
        python3 setup.py sdist --formats zip
        pip install dist/*.zip
    - name: Test HTTP API
      run: |
        compound-splitters-nl-api &
        sleep 1
        response=$(curl 127.0.0.1:5000/list --write-out '%{http_code}' --output /dev/null --silent)
        if [[ $response -ne "200" ]]; then exit -1; fi
    - name: Test socket
      run: |
        compound-splitters-nl-socket &
        sleep 1
        response=$(echo -e 'test,never' | telnet localhost 7005 | grep Connected )
        if [ -z "$response" ]; then exit -1; fi
